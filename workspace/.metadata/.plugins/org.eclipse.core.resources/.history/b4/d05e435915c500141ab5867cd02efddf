import com.softsynth.jsyn.*;

public class MusicPlayer {

	double[] notes = { 27.5, 30.868, 32.703, 36.708, 41.203, 43.654, 48.999 };

	int noteLength = 200;
	double volume = 0.1;

	SawtoothOscillatorBL osc;
	// SineOscillator osc;
	LineOut lineOut;

	public MusicPlayer(boolean repeat, String notes, int[] noteLength,
			int[] octive) {

		// Start JSyn synthesizer.
		Synth.startEngine(0);

		// Create some unit generators.
		osc = new SawtoothOscillatorBL();
		// osc = new SineOscillator();
		lineOut = new LineOut();
		// Connect oscillator to both left and right channels of output.
		osc.output.connect(0, lineOut.input, 0);
		osc.output.connect(0, lineOut.input, 1);

		// Start the unit generators so they make sound.
		try {
			osc.start();
			lineOut.start();
			for (int i = 0; i < notes.length(); i++) {
				noteLength[i] *= 100;
				char c = notes.charAt(i);

				switch (c) {
				case 'A':
					playNote('C', octive[i], noteLength[i]);
					break;
				case 'G':
					playNote('D', octive[i], noteLength[i]);
					break;
				case 'C':
					playNote('E', octive[i], noteLength[i]);
					break;
				case 'T':
					playNote('F', octive[i], noteLength[i]);
					break;
				}

				if (notes.length() == i -1 && repeat) {
					i = 0;

				}

			}

			// Stop units and delete them to reclaim their resources.
			osc.stop();
			lineOut.stop();
			osc.delete();
			lineOut.delete();
		} catch (Exception e) {
			System.exit(0);
		}

		// Stop JSyn synthesizer.
		Synth.stopEngine();

	}

	public void playNote(char note, int octive, int noteLength) {
		double noteToPlay = 0;
		switch (note) {
		case 'A':
			noteToPlay = notes[0] * octive;
			break;
		case 'B':
			noteToPlay = notes[1] * octive;
			break;
		case 'C':
			noteToPlay = notes[2] * octive;
			break;
		case 'D':
			noteToPlay = notes[3] * octive;
			break;
		case 'E':
			noteToPlay = notes[4] * octive;
			break;
		case 'F':
			noteToPlay = notes[5] * octive;
			break;
		case 'G':
			noteToPlay = notes[6] * octive;
			break;
		default:
			noteToPlay = 0;
			break;
		}

		osc.frequency.set(noteToPlay);
		osc.amplitude.set(volume);

		Synth.sleepForTicks(noteLength);

		osc.frequency.set(0);
		osc.amplitude.set(volume);

		Synth.sleepForTicks(50);
	}

}
